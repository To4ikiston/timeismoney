import asyncio
import datetime
import logging
import os
from zoneinfo import ZoneInfo

from quart import Quart, request
from hypercorn.asyncio import serve
from hypercorn.config import Config
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.error import BadRequest, RetryAfter
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
APP_URL = os.getenv("APP_URL")
PORT = int(os.getenv("PORT", "8000"))
SECRET_TOKEN = os.getenv("SECRET_TOKEN")
BAR_LENGTH = 16

# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏ –¥–∞—Ç—ã
ekb_tz = ZoneInfo("Asia/Yekaterinburg")
START_DATE = datetime.datetime(2025, 3, 14, 0, 0, tzinfo=ekb_tz)
END_DATE = datetime.datetime(2025, 7, 1, 23, 59, tzinfo=ekb_tz)
UPDATE_INTERVAL = 60  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥

app = Quart(__name__)
application = None

active_timers = {}  # {chat_id: {"message_id": int, "task": asyncio.Task}}

async def calculate_progress() -> tuple:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–¥–Ω–µ–π, —á–∞—Å–æ–≤, –º–∏–Ω—É—Ç, —Å–µ–∫—É–Ω–¥, –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è)"""
    now = datetime.datetime.now(ekb_tz)
    
    if now < START_DATE:
        time_left = END_DATE - START_DATE
        progress = 0.0
    elif now > END_DATE:
        return 0, 0, 0, 0, 100
    else:
        time_left = END_DATE - now
        total_duration = (END_DATE - START_DATE).total_seconds()
        elapsed = (now - START_DATE).total_seconds()
        progress = min(elapsed / total_duration, 1.0)  # –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è

    days = time_left.days
    hours, rem = divmod(time_left.seconds, 3600)
    minutes, seconds = divmod(rem, 60)
    
    return days, hours, minutes, seconds, int(progress * 100)

async def update_timer_message(chat_id: int, context: ContextTypes.DEFAULT_TYPE):
    def get_day_form(days: int) -> str:
        if 11 <= days % 100 <= 14:
            return "–¥–Ω–µ–π"
        remainder = days % 10
        if remainder == 1:
            return "–¥–µ–Ω—å"
        elif 2 <= remainder <= 4:
            return "–¥–Ω—è"
        else:
            return "–¥–Ω–µ–π"
        
    try:
        data = active_timers.get(chat_id)
        if not data:
            return

        days, h, m, s, progress = await calculate_progress()
        current_state = (days, h, m, s, progress)
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –µ—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
        if data.get("last_state") == current_state:
            return
            
        data["last_state"] = current_state
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        filled_len = int(BAR_LENGTH * (progress / 100))
        bar_str = "‚ñà" * filled_len + "‚îÄ" * (BAR_LENGTH - filled_len)
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
        time_button = InlineKeyboardButton(
            f"{days} {get_day_form(days)} {h:02d}—á {m:02d}–º", 
            callback_data="none"
        )
        progress_button = InlineKeyboardButton(
            f"[{bar_str}] {progress}%", 
            callback_data="none"
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await context.bot.edit_message_text(
            chat_id=chat_id,
            message_id=data["message_id"],
            text="–û–°–¢–ê–õ–û–°–¨",
            reply_markup=InlineKeyboardMarkup([[time_button], [progress_button]])
        )            
    except BadRequest as e:
        if "not modified" not in str(e):
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    except RetryAfter as e:
        logger.warning(f"–õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤! –ñ–¥–µ–º {e.retry_after} —Å–µ–∫.")
        await asyncio.sleep(e.retry_after)
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

async def timer_task(chat_id: int, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–¥–∞—á–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    while True:
        try:
            if chat_id not in active_timers:
                break
                
            await update_timer_message(chat_id, context)
            await asyncio.sleep(UPDATE_INTERVAL)
            
        except asyncio.CancelledError:
            logger.info("–ó–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
            break
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ç–∞–π–º–µ—Ä-–∑–∞–¥–∞—á–µ: {e}")
            await asyncio.sleep(10)

@app.route('/health')
async def health():
    return 'OK'

@app.route('/telegram', methods=['POST'])
async def telegram_webhook():
    if request.headers.get("X-Telegram-Bot-Api-Secret-Token") != SECRET_TOKEN:
        return "Unauthorized", 401
        
    try:
        update = Update.de_json(await request.get_json(), application.bot)
        await application.process_update(update)
        return 'OK', 200
    except Exception as e:
        logger.error(f"Webhook error: {e}")
        return 'ERROR', 500

async def countdown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    thread_id = update.message.message_thread_id  # –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–º—ã
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
    if chat_id in active_timers:
        try:
            active_timers[chat_id]["task"].cancel()
        except:
            pass
        del active_timers[chat_id]

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        msg = await context.bot.send_message(
            chat_id=chat_id,
            text="üîÑ –ó–∞–ø—É—Å–∫–∞—é —Ç–∞–π–º–µ—Ä...",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...", callback_data="none")]]),  # –ó–∞–ø—è—Ç–∞—è
            message_thread_id=thread_id  # –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞
        )
        
        task = asyncio.create_task(timer_task(chat_id, context))
        active_timers[chat_id] = {
            "message_id": msg.message_id,
            "task": task
        }
        
        await update_timer_message(chat_id, context)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–∞–π–º–µ—Ä–∞: {e}")
        await context.bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–∞–π–º–µ—Ä–∞")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üöÄ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n"
        "/countdown - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n\n"
        "–¢–∞–π–º–µ—Ä –æ—Ç—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è —Å 14.03.2025 –¥–æ 01.07.2025"
    )
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=text
    )

async def main():
    global application
    max_attempts = 3  # –ú–∞–∫—Å–∏–º—É–º 3 –ø–æ–ø—ã—Ç–∫–∏
    attempt = 0
    
    while attempt < max_attempts:
        try:
            application = ApplicationBuilder().token(BOT_TOKEN).build()
            application.add_handler(CommandHandler("countdown", countdown))
            application.add_handler(CommandHandler("help", help_command))
            
            await application.initialize()
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –≤–µ–±—Ö—É–∫
            await application.bot.delete_webhook()
            logger.info("–°—Ç–∞—Ä—ã–π –≤–µ–±—Ö—É–∫ —É–¥–∞–ª–µ–Ω")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –≤–µ–±—Ö—É–∫
            await application.bot.set_webhook(
                url=f"{APP_URL}/telegram",
                secret_token=SECRET_TOKEN
            )
            logger.info(f"–ù–æ–≤—ã–π –≤–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {APP_URL}/telegram")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–µ–±—Ö—É–∫–∞ (–¥–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ)
            webhook_info = await application.bot.get_webhook_info()
            logger.info(f"–¢–µ–∫—É—â–∏–π –≤–µ–±—Ö—É–∫: {webhook_info.url}")
            
            # –ï—Å–ª–∏ –≤—Å—ë —É—Å–ø–µ—à–Ω–æ - –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
            break
            
        except Exception as e:
            attempt += 1
            logger.error(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt}/{max_attempts} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
            if attempt == max_attempts:
                raise
            await asyncio.sleep(5 * attempt)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    config = Config()
    config.bind = [f"0.0.0.0:{PORT}"]
    await serve(app, config)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    finally:
        # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        for chat_id in list(active_timers.keys()):
            try:
                active_timers[chat_id]["task"].cancel()
            except:
                pass
