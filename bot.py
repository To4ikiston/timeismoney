import asyncio
import datetime
import logging
import os
from zoneinfo import ZoneInfo

from quart import Quart, request
from hypercorn.asyncio import serve
from hypercorn.config import Config
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
APP_URL = os.getenv("APP_URL")  # –ü—Ä–∏–º–µ—Ä: https://your-domain.com
PORT = int(os.getenv("PORT", "8000"))
SECRET_TOKEN = os.getenv("SECRET_TOKEN")
BAR_LENGTH = 16 
# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏ –¥–∞—Ç—ã
ekb_tz = ZoneInfo("Asia/Yekaterinburg")
START_DATE = datetime.datetime(2025, 3, 14, 0, 0, tzinfo=ekb_tz)
END_DATE = datetime.datetime(2025, 7, 1, 23, 59, tzinfo=ekb_tz)
UPDATE_INTERVAL = 60  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
app = Quart(__name__)
application = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –≤ main()

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (–¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã)
active_timers = {}  # –§–æ—Ä–º–∞—Ç: {chat_id: {"message_id": int, "task": asyncio.Task}}

async def calculate_progress() -> tuple:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å, –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è)"""
    now = datetime.datetime.now(ekb_tz)
    total_seconds = (END_DATE - START_DATE).total_seconds()
    elapsed = (now - START_DATE).total_seconds()
    
    if elapsed < 0:
        return (END_DATE - START_DATE).days, 0.0
    
    progress = min(elapsed / total_seconds, 1.0) if total_seconds > 0 else 0.0
    days_left = (END_DATE - now).days
    return days_left, progress

async def update_timer_message(chat_id: int, context: ContextTypes.DEFAULT_TYPE):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∞–π–º–µ—Ä–æ–º"""
    try:
        days_left, progress = await calculate_progress()
        percent = int(progress * 100)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä (20 —Å–∏–º–≤–æ–ª–æ–≤)
        bar = "‚¨õ" * int(BAR_LENGTH * progress) + "‚¨ú" * (BAR_LENGTH - int(BAR_LENGTH * progress))  # <-- –ó–¥–µ—Å—å 16
        
        # –ë–æ–ª—å—à–∞—è –∫–Ω–æ–ø–∫–∞ —Å —Ç–µ–∫—Å—Ç–æ–º
        text = f"–î–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å: {days_left}\n{bar} {percent}%"
        keyboard = [[InlineKeyboardButton(text, callback_data="refresh")]]
        
        await context.bot.edit_message_text(
            chat_id=chat_id,
            message_id=active_timers[chat_id]["message_id"],
            text="‚è≥ –¢–∞–π–º–µ—Ä –¥–æ 1 –∏—é–ª—è 2025 (–ï–ö–ë):",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")

async def timer_task(chat_id: int, context: ContextTypes.DEFAULT_TYPE):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞"""
    while True:
        if chat_id not in active_timers:
            break
            
        await update_timer_message(chat_id, context)
        await asyncio.sleep(UPDATE_INTERVAL)

@app.route('/health')
async def health():
    return 'OK'

@app.route('/telegram', methods=['POST'])
async def telegram_webhook():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–æ–≤ Telegram"""
    try:
        update = Update.de_json(await request.get_json(), application.bot)
        await application.process_update(update)
        return 'OK', 200
    except Exception as e:
        logger.error(f"Webhook error: {e}", exc_info=True)
        return 'ERROR', 500

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text(
        "‚è∞ –Ø –±–æ—Ç-—Ç–∞–π–º–µ—Ä!\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π /timer –≤ –≥—Ä—É–ø–ø–µ –∏–ª–∏ —á–∞—Ç–µ, —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á—ë—Ç –¥–æ 1 –∏—é–ª—è 2025."
    )

async def timer_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /timer"""
    chat_id = update.effective_chat.id
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
    if chat_id in active_timers:
        active_timers[chat_id]["task"].cancel()
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    msg = await context.bot.send_message(
        chat_id=chat_id,
        text="üîÑ –ó–∞–ø—É—Å–∫–∞—é —Ç–∞–π–º–µ—Ä...",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...", callback_data="none")]])
    )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    task = asyncio.create_task(timer_task(chat_id, context))
    active_timers[chat_id] = {
        "message_id": msg.message_id,
        "task": task
    }
    
    # –ü–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    await update_timer_message(chat_id, context)

async def main():
    global application
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    application = ApplicationBuilder().token(BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("timer", timer_command))
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞
    await application.bot.set_webhook(
        url=f"{APP_URL}/telegram",
        secret_token=SECRET_TOKEN
    )
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    config = Config()
    config.bind = [f"0.0.0.0:{PORT}"]
    await serve(app, config)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
